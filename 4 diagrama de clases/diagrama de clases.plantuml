@startuml diagrama de clases

left to right direction

    class Entrenador {
        - idEntrenador : int
        - nombre : str
        - genero : str
        - listaPookemones : ArrayList<Pookemon>
        - objetos : ArrayList<Objeto>
        - pokemonActual : int 

        + atacar(idMovimiento : int)
        + defenderse()
        + usarObjeto(idObjeto : int)
        + cambiarPookemon(idPookemon : int)
        + mostrarMovimientosPoookemon(idPookemon : int)
        + obtenerPookemonPorID(idPookemon : int)

    }

    newpage

    class Organizador {
        - idOrganizador : int
        - torneoActual : Torneo

        + inscribirJugadorTorneo(jugador : Entrenador)
        + crearTorneo()
        + definirRecompensa(idTorneo : int, recompensa : str)
        + mostrarReporteBatalla(idTorneo : int, idBatalla : int)
        + obtenerTorneoPorID(idTorneo : int)
        + mostrarCreditos()

    }

    newpage

    class Pookemon {
        - idPookemon : int
        - nombre : str
        - estadistica : Estadistica
        - elemento : str
        - movimientos : ArrayList<Movimiento>
        - efecto : Efecto
        
        + mostrarListaMovimientos()
        + recibirDaño()
        + obtenerMovimientoPorID(idMovimiento : int)


    }

    newpage

    class Estadistica {
        - vida : int 
        - ataqueFisico : int
        - defensaFisica : int
        - ataqueEspecial : int 
        - defensaEspecial : int
        - velocidad : int 

        + mostrarEstadisticas()
  }

    newpage

    class Movimiento {
        - idMovimiento : int
        - descripcion : str
        - potencia : int
        - precision: int
        - cantidadPP : int
        - elemento : str
        - efecto : Efecto 

        + calcularCostoMovimiento()
        - calcularDañoBase()
        - calcularGolpeCritico()
        + calcularDañoTotal()
        + mostrarMovimiento()
        + realizar()
    }

    newpage

    class Objeto{
        - idObjeto : int
        - nombreObjeto  : str
        - tipoObjeto : str
        - puntosR : int

    }

    newpage

    class Batalla {
        - idBatalla : int
        - entrenador1 : Entrenador
        - entrenador2 : Entrenador
        - turnos[] : str
        - numeroTurno: int

        + iniciarBatalla()
        + generarMazoPookemones()
        + aplicarEfectosPersistentes()
        + determinarTurno()
        + ejecutarTurno(Primero : Entrenador, Segundo : Entrenador)
        + generarReporteBatalla()
        
    }

    newpage

    class NodoTorneo {
      - nodoTorneoIzq: NodoTorneo
      - nodoTorneoDer: NodoTorneo
      - batalla : Batalla
      - ganador : Entrenador 

      + determinarGanador()

    }

    newpage

    class Torneo {
        - recompensa :  Recompensa
        - nodoTorneo : NodoTorneo
        - jugadores : ArrayList<Entrenador>
        - pookemones : ArrayList<Pookemon>

        + gestionarRondasTorneo()
        + iniciarTorneo()
        + devolverGanadorTorneo()
        + listarJugadores()
        + listarPookemones()
        
    }

    note right of Torneo::gestionarRondasTorneo
        método que vaya posicionando el ganador 
        de cada nodo en el nodo anterior 
        (siguiendo secuencia de árbol)
    end note

    newpage

    class Recompensa {
        - idRecompensa : int
        - tipoRecompensa : str
        - fechaVencimiento : date 

        + generarCodigo()

    }

    newpage

    class Efecto {

        + aplicar(nombreObjetivo : Pookemon)
        + haTerminado()
    }

    newpage 
    
    class MovimientoFisico{

    }

    newpage 

    class MovimientoEspecial{

    }


@enduml   
    

    

    
